#include <iostream>
#include <string>
#include <sys/socket.h>
#include <sstream>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/udp.h>
#include <stdlib.h>
#include <unistd.h>
#include <cstring>
#include <arpa/inet.h>
#include <fstream>
#include <algorithm>
#include <netdb.h>
#include <sys/stat.h>
#include <ctime>

#define DEBUG
#ifdef DEBUG
#define DEB(x) do{\
  std::cerr<< x;}\
  while(0)
#endif
using namespace std;

const int ONE = 1;

void  GetIp(){
  char buffer[34]{0};
  int buflen=34;
   int sock = socket(AF_INET, SOCK_DGRAM, 0);

   const char* kGoogleDnsIp = "8.8.8.8";
   uint16_t kDnsPort = 53;
   struct sockaddr_in serv;
   memset(&serv, 0, sizeof(serv));
   serv.sin_family = AF_INET;
   serv.sin_addr.s_addr = inet_addr(kGoogleDnsIp);
   serv.sin_port = htons(kDnsPort);

   int err = connect(sock, (const sockaddr*) &serv, sizeof(serv));

   sockaddr_in name;
   socklen_t namelen = sizeof(name);
   err = getsockname(sock, (sockaddr*) &name, &namelen);

   const char* p = inet_ntop(AF_INET, &name.sin_addr, buffer, buflen);

   cout<<"address: "<<p<<endl;
   close(sock);
}

string ConvertToBin(char ch){
  string result {};
  for(int i =7;i>=0;i--){
    result.append(1, (ch>>i & 0x1) + '0');
  }
  return result;
}

int main (int argc, char *argv[])
{
  // GetIp();
  // cout<<sizeof(struct icmphdr)<<"\n";
  // exit(-1);
  //FIXME parse arguments
  auto dest_addr = argv[1];
  if (argc >4  || argc < 2){
      cerr<<"Wrong parameters"<<endl;
      exit (-1);
  }

  int send_sock = 0;
  if ((send_sock = socket (AF_INET, SOCK_DGRAM, 0)) <= 0)
  {
   cerr<< "ERROR: creating send socket"<<"\n";
   exit(-1);
  }
  int recv_sock=0;
  if ((recv_sock = socket (AF_INET, SOCK_RAW, IPPROTO_ICMP)) <= 0)
  {
   cerr<< "ERROR: creating recieve socket"<<"\n";
   exit(-1);
  }
  char buf[1024] = { 0 };
  struct ip *ip_hdr = (struct ip *) buf;
  char ttl = 1;

  // if (setsockopt (send_sock, IPPROTO_IP, IP_HDRINCL, const_cast<const int *>(&ttl), sizeof (ttl)) < 0){
  //   cerr<<"Error: setting HDRINCL"<<endl;
  //   close(recv_sock);
  //   close(send_sock);
  //   exit(-1);
  // }

  struct sockaddr_in addr;
  addr.sin_port = htons (6677);
  addr.sin_family = AF_INET;
  inet_pton (AF_INET, dest_addr, &(addr.sin_addr));
  if(setsockopt(recv_sock, IPPROTO_IP, IP_RECVERR, &ONE,sizeof(ONE))){
    cerr<<"ERROR: can't set IP_RECVERR option for socket\n";
    close(send_sock);
    close(recv_sock);
    exit(-1);
  }

  while (1)
    {
      // ip_hdr->ip_hl = 5;
      // ip_hdr->ip_v = 4;
      // ip_hdr->ip_tos = 0;
      // ip_hdr->ip_len = sizeof(struct ip) + sizeof(struct udphdr);
      // ip_hdr->ip_id = 1000;
      // ip_hdr->ip_off = 0;
      // ip_hdr->ip_p = IPPROTO_UDP;
      // ip_hdr->ip_sum = 0;
      // ip_hdr->ip_ttl = htons(ttl);
      // inet_pton (AF_INET, "10.0.2.15", &(ip_hdr->ip_src));
      // inet_pton (AF_INET, dest_addr, &(ip_hdr->ip_dst));
      // inet_pton (AF_INET, const_cast<const char *>(&ttl), &(ip_hdr->ip_ttl));
      if(setsockopt(send_sock, IPPROTO_IP, IP_TTL, &ttl,sizeof(ttl))){
        cerr<<"ERROR: can't set IP_TTL option for socket\n";
        close(send_sock);
        close(recv_sock);
        exit(-1);
      }

      struct udphdr * udphdr = static_cast<struct udphdr *>(static_cast<void *>(buf + sizeof(struct ip)));
      udphdr->uh_dport       = htons(6677);
      udphdr->uh_sport     = htons(0);
      udphdr->uh_sum    = 0;
      udphdr->uh_ulen      = htons(sizeof(struct udphdr));
      DEB("Start sending"<<endl);
      sendto (send_sock, buf, sizeof(struct udphdr) + sizeof(struct ip), 0, (struct sockaddr*) &addr, sizeof addr);
      DEB("end sending"<<endl);
      char buff[100] = { 0 };
      struct sockaddr_in addr2;
      socklen_t len = sizeof (struct sockaddr_in);
      recvfrom (recv_sock, buff, sizeof(buff), 0, (struct sockaddr*) &addr2, &len);
      struct icmphdr *icmphd2 = (struct icmphdr *) (buff + 20);
      if (icmphd2->type != 0)
      {
        printf ("hop limit:%d Address:%s\n", ttl, inet_ntoa (addr2.sin_addr));
      }
      else
      {
        printf ("Reached destination:%s with hop limit:%d\n", inet_ntoa (addr2.sin_addr), ttl);
        char buffer[20] {0};
        for(char i : buffer){
          cout<<ConvertToBin(i) <<" |"<<endl;
        }
        // inet_ntop(AF_INET, &buff.sin_addr, buffer, sizeof(buffer));
        // cout<<"addr: "<<buffer<<endl;
        close(recv_sock);
        close(send_sock);
        exit (0);
      }

      ttl++;
    }

  return 0;
}
